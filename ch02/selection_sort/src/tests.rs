#[cfg(test)]
#[path = "selection_sort.rs"]
mod selection_sort_tests {
  use crate::selection_sort::{find_smallest, selection_sort};

  #[test]
  fn test_vector_8_bits() {
    let unsorted_elements: Vec<i16> = vec![
      39, 85, 15, 114, -53, 28, -22, 32, 82, -108, 26, 107, -27, -118, 119, -67, 4, 106,
      51, 60, -4, -28, -54, 42, 125, 91, -88, -63, -19, -85, -9, -56, -93, -34, -12, 44,
      -43, -42, 83, -50, -69, 102, 48, -91, 8, -99, -75, 99, 58, -36, -17, -3, 6, -21,
      -38, 27, -120, 12, 50, -96, 70, -58, -11, 66, 108, 47, 101, 52, 3, -35, -55, 75,
      -61, -104, -41, -14, 90, -116, 5, 40, -66, 78, 67, 41, 37, 23, -65, -70, 63, 100,
      -32, -110, -111, -18, 0, 80, 123, 17, 103, -46, 124, -64, -2, -125, -71, 22, -72,
      2, 126, 115, -124, 9, 14, 79, 121, 74, -105, -112, -128, -25, -62, 56, -77, -113,
      65, 98, -109, 118, -121, -78, -48, 69, -84, -76, 120, 96, 11, 71, 68, 43, 1, -10,
      55, -6, -79, 25, -115, -1, 86, 16, 10, 127, 64, 122, 18, -103, 95, -94, -98, 7, 88,
      21, -87, -39, -7, -45, -119, 109, 34, 33, -101, 46, -60, 30, -90, -8, -59, 92, 93,
      -100, -23, -31, -74, -20, -15, 84, -107, 36, 53, 54, -47, 20, -13, -95, -80, -123,
      73, 113, -68, -51, -81, -86, -127, -73, -117, 105, 110, 24, 59, 57, -29, 117, 111,
      -33, 62, -97, 35, 49, -49, 72, -122, -82, -16, -52, 76, 81, 19, -37, 89, 45, -30,
      -40, 104, 29, 61, 94, 38, -102, 97, -89, 13, -83, -26, -44, -106, 116, -114, 87,
      112, 77, -126, -5, -57, -24, 31, -92,
    ];

    let sorted_elements: Vec<i16> = vec![
      -128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115,
      -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101,
      -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85,
      -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69,
      -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53,
      -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37,
      -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21,
      -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3,
      -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
      42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
      63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
      84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
      104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
      120, 121, 122, 123, 124, 125, 126, 127,
    ];

    assert_eq!(selection_sort(&unsorted_elements), sorted_elements);
  }

  #[test]
  fn test_sort_empty_collection() {
    let elements: Vec<i16> = Vec::new();

    assert_eq!(selection_sort(&elements), Vec::<i16>::new());
  }

  #[test]
  fn test_find_smallest_empty_collection() {
    let elements: Vec<i32> = Vec::new();

    assert_eq!(find_smallest(&elements), None);
  }

  #[test]
  fn test_find_smallest() {
    let elements: Vec<i32> = vec![55, -6, -79, 25, -115, -1, 86, 16, 10, 127];

    assert_eq!(find_smallest(&elements), Some(4));
  }
}
